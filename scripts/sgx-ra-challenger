#!/usr/bin/env python3.5

import argparse
import socket
import logging
import datetime
import os

from sgx_ra_challenger.util import get_private_key, get_mrenclave, check_msg
from sgx_ra_challenger.socket_util import receive_msg, send_msg
from sgx_ra_challenger.crypto import generate_ecdh_key_pair
from sgx_ra_challenger.crypto import derive_key
from sgx_ra_challenger.crypto import derive_shared_key
from sgx_ra_challenger.crypto import create_key_signature
from sgx_ra_challenger.crypto import create_msg2_mac
from sgx_ra_challenger.crypto import verify_msg3_mac
from sgx_ra_challenger.crypto import verify_msg3_report_data
from sgx_ra_challenger.crypto import verify_quote_mrenclave
from sgx_ra_challenger.config import QUOTE_TYPE, SPID, KDF_ID, SSL_CERT_PATH, SSL_KEY_PATH
from sgx_ra_challenger import ias


class InvalidExtendedEpidGidError(Exception):
    pass


class Challenger(object):
    def __enter__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.__enter__()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.socket.__exit__(exc_type, exc_val, exc_tb)

    def __init__(self, dest_host, dest_port):
        self.dest_host = dest_host
        self.dest_port = dest_port
        self.extended_epid_gid = None
        self.epid_gid = None
        self.enclave_public_key = None
        self.public_key = None
        self.quote = None
        self.revocation_list = None
        self.key_signature = None
        self.msg2_mac = None
        self.msg3_mac = None
        self.ps_sec_prop = None
        self.shared_key = None
        self.session_mac_key = None
        self.long_term_private_key = get_private_key()
        self.mrenclave = get_mrenclave()
        self.quote_type = QUOTE_TYPE
        self.spid = bytes.fromhex(SPID)
        self.verification_result = None

    def execute(self):
        self.socket.connect((self.dest_host, self.dest_port))
        self.send_attestation_request()

        self.receive_msg0()
        self.process_msg0()

        self.receive_msg1()

        self.create_msg2()
        self.send_msg2()

        self.receive_msg3()
        self.process_msg3()

        self.send_msg4()

    def send_attestation_request(self):
        self.socket.sendall(b"attest")

    def receive_msg0(self):
        logging.info("Waiting for msg0")
        msg0 = receive_msg(self.socket)
        check_msg(msg0, dict, 1)

        self.extended_epid_gid = msg0["extended_epid_gid"]
        logging.info("Msg0 received")

    def process_msg0(self):
        if self.extended_epid_gid != 0:
            # Extended EPID group ID != 0 means that the enclave was provisioned to use another attestation service
            # than Intel's. This is currently unsupported.
            # See: https://software.intel.com/en-us/forums/intel-software-guard-extensions-intel-sgx/topic/671363
            raise InvalidExtendedEpidGidError("Received invalid extended EPID group ID %r" % self.extended_epid_gid)

    def receive_msg1(self):
        logging.info("Waiting for msg1")
        msg1 = receive_msg(self.socket)
        check_msg(msg1, dict, 2)
        check_msg(msg1["public_key"], str, 128)
        check_msg(msg1["epid_gid"], str, 8)

        self.enclave_public_key = bytes.fromhex(msg1["public_key"])
        self.epid_gid = bytes.fromhex(msg1["epid_gid"])
        logging.debug("enclave public key: %r", self.enclave_public_key.hex())
        logging.debug("EPID group ID: %r", self.epid_gid.hex())
        logging.info("Msg1 received")

    def create_msg2(self):
        logging.info("Creating msg2")
        self.revocation_list = self.get_revocation_list(self.epid_gid)

        self.public_key, private_key = generate_ecdh_key_pair()
        logging.debug("my public key: %r", self.public_key.hex())

        self.shared_key = derive_shared_key(private_key, self.enclave_public_key)
        logging.debug("shared key: %r", self.shared_key.hex())

        self.key_signature = create_key_signature(self.long_term_private_key,
                                                  self.public_key,
                                                  self.enclave_public_key)
        logging.debug("key signature: %r\n", self.key_signature.hex())

        self.session_mac_key = derive_key(self.shared_key, b'SMK')
        logging.debug("session MAC key: %r\n", self.session_mac_key.hex())

        self.msg2_mac = create_msg2_mac(self.session_mac_key,
                                        self.public_key,
                                        self.spid,
                                        self.quote_type,
                                        KDF_ID,
                                        self.key_signature)

        logging.debug("MAC: %r\n", self.msg2_mac.hex())
        logging.info("msg2 created")

    def send_msg2(self):
        logging.info("Sending msg2")
        msg2 = {
            "public_key": self.public_key.hex(),
            "spid": self.spid.hex(),
            "quote_type": self.quote_type.hex(),
            "kdf_id": KDF_ID.hex(),
            "key_signature": self.key_signature.hex(),
            "mac": self.msg2_mac.hex(),
            "revocation_list": self.revocation_list.hex()
        }

        send_msg(self.socket, msg2)
        logging.info("msg2 sent")

    @staticmethod
    def get_revocation_list(epid_gid: bytes):
        return ias.retrieve_sigrl(epid_gid)

    def receive_msg3(self):
        logging.info("Waiting for msg3")
        msg3 = receive_msg(self.socket)
        check_msg(msg3, dict, 3)

        self.quote = bytes.fromhex(msg3["quote"])
        self.msg3_mac = bytes.fromhex(msg3["mac"])
        self.ps_sec_prop = bytes.fromhex(msg3["ps_sec_prop"])

        logging.debug("quote: %r", self.quote)

    def process_msg3(self):
        logging.info("Processing msg3")
        verify_msg3_mac(
            self.msg3_mac,
            self.session_mac_key,
            self.enclave_public_key,
            self.quote,
            self.ps_sec_prop
        )

        report_data = self.quote[368:432]
        verify_msg3_report_data(report_data, self.enclave_public_key, self.public_key, self.shared_key)

        self.verify_quote(self.quote)
        self.verification_result = True
        logging.info("Msg3 processed")

    def verify_quote(self, quote):
        verify_quote_mrenclave(quote, self.mrenclave)
        ias.verify_quote(quote)

    def send_msg4(self):
        logging.info("Sending msg4")
        msg4 = {"verification_result": self.verification_result}
        send_msg(self.socket, msg4)
        logging.info("Msg4 sent")


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", "-v", action="store_true", help="Print debug messages")
    mode = parser.add_mutually_exclusive_group(required=True)
    mode.add_argument("--listen", "-l", action="store_true",
                      help="Listen for attestation attempts on address ADDRESS on port PORT")
    mode.add_argument("--connect", "-c", action="store_true", help="Request attestation from host ADDRESS on port PORT")
    parser.add_argument("ADDRESS", type=str)
    parser.add_argument("PORT", type=int)

    return parser.parse_args()


def init(args):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    logging.getLogger('sh').setLevel(logging.INFO)


def main():
    args = parse_args()
    init(args)

    if args.listen:
        raise NotImplementedError()

    if not os.path.isfile(SSL_CERT_PATH):
        raise FileNotFoundError(SSL_CERT_PATH)

    if not os.path.isfile(SSL_KEY_PATH):
        raise FileNotFoundError(SSL_KEY_PATH)

    t0 = datetime.datetime.now()
    with Challenger(args.ADDRESS, args.PORT) as challenger:
        challenger.execute()
    t1 = datetime.datetime.now()
    logging.info("Remote attestation process completed in %s", t1-t0)


if __name__ == "__main__":
    main()
